// 颠倒给定的 32 位无符号整数的二进制位。

// 提示：

// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。

/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
var reverseBits = function (n) {
  const M1 = 0x55555555; // 01010101010101010101010101010101
  const M2 = 0x33333333; // 00110011001100110011001100110011
  const M4 = 0x0f0f0f0f; // 00001111000011110000111100001111
  const M8 = 0x00ff00ff; // 00000000111111110000000011111111

  n = (n >>> 16) | (n << 16);
  //分治
  //0000001010010100 0001111010011100
  //右移                             左移
  //00000000000000000000001010010100 00011110100111000000000000000000
  //按位或
  //00000000000000000000001010010100
  //00011110100111000000000000000000
  //结果
  //00011110100111000000001010010100
  console.log((n & M8) << 8);
  console.log(0b10011100000000001001010000000000);
  n = ((n >>> 8) & M8) | ((n & M8) << 8);
  //左
  //00011110100111000000001010010100
  //右移
  //00000000000111101001110000000010
  //逻辑与
  //00000000111111110000000011111111
  //00000000000111100000000000000010

  //右
  //00011110100111000000001010010100
  //逻辑与
  //00000000111111110000000011111111
  //00000000100111000000000010010100
  //左移
  //10011100000000001001010000000000

  //左右逻辑或
  //00000000000111100000000000000010
  //10011100000000001001010000000000
  //10011100000111101001010000000010

  n = ((n >>> 4) & M4) | ((n & M4) << 4);
  n = ((n >>> 2) & M2) | ((n & M2) << 2);
  n = ((n >>> 1) & M1) | ((n & M1) << 1);
  return n;
};

n = 0b00000010100101000001111010011100;
//    00011110100111000000001010010100
//    00000000100111100000000010010110

// 964176192 (00111001011110000010100101000000)
//输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//  因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000

// 输入：n = 11111111111111111111111111111101
// 输出：3221225471 (10111111111111111111111111111111)
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。

const res = reverseBits(n);
console.log(res);
